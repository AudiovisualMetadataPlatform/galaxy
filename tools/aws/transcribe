#!/bin/sh

# Script to run a aws transcribe job using aws-cli.

# Usage:
# transcribe <input_file> <output_file> <audio_format> <s3_bucket> <s3_directory> <job_directory>

# TODO: shall we use ENV var for <S3_bucket> <s3_directory>, <job_directory>? 
# The reason for it is to avoid passing parameter to script each time (although since the script is only called by Galaxy not a human, it probably doesn't matter);
# the reason against it is that it makes the tool less flexible and more dependent.

# record transcirbe command parameters
input_file=$1
output_file=$2
audio_format=$3
s3_bucket=$4
s3_directory=$5
job_directory=$6

job_name="AWS_Transcribe"
log_file=${job_directory}/${job_name}.log
#echo ${input_file} ${output_file} ${audio_format} ${s3_bucket} ${s3_directory} ${job_directory} > $log_file
echo "echo ${input_file} ${output_file} ${audio_format} ${s3_bucket} ${s3_directory} ${job_directory} > $log_file" #debug

# upload media file from local Galaxy source file to S3 directory
aws s3 cp ${input_file} s3://${s3_bucket}/{$s3_directory} > $log_file
echo "aws s3 cp ${input_file} s3://${s3_bucket}/${s3_directory} > $log_file"

# TODO
# AWS job related files should all go to a designated directory defined by $job_directory, 
# and to preserve hisotry, each job run can create a sub-directory indicated by a SeqNo which can be inferred from the last SeqNo used.
# For now all job files are under job_directory directly, no sub-directory is created, and previous job related files will be overwritten by next job run.

# create json file in the aws directory, i.e. <job_directory>/<job_name>_request.json
request_file=${job_directory}/${job_name}_request.json
input_file_name=$(basename ${input_file})
media_file_url="http://${s3_bucket}.s3.us-east-2.amazonaws.com/${s3_directory}/${input_file_name}"

# TODO can we use input file extension as the AWS audio format, or does this info need to come from media info which can be done in pre-processing?
# for now we can let user specify it via parameter
### use the last extention as the file format
### input_file_format=${input_file_name##*.}

#jq -n '{ "TranscriptionJobName": "${job_name}", "LanguageCode": "en-US", "MediaFormat": "${audio_format}", "Media": { "MediaFileUri": "${s3_bucket_directory}/${input_file_name}" } }' > ${request_file}
jq -n "{ \"TranscriptionJobName\": \"${job_name}\", \"LanguageCode\": \"en-US\", \"MediaFormat\": \"${audio_format}\", \"Media\": { \"MediaFileUri\": \"${media_file_url}\" } }" > ${request_file}
 
 
# submit transcribe job
#aws transcribe start-transcription-job --cli-input-json file://${request_file} > $log_file

# wait while job is running
while [ `aws transcribe get-transcription-job --transcription-job-name "${job_name}" --query "TranscriptionJob"."TranscriptionJobStatus"` = "IN_PROGRESS" ] 
do
    sleep 60s
done

# retrieve job response
response_file=${job_directory}/${job_name}_response.json
aws transcribe get-transcription-job --transcription-job-name "${job_name}" > ${response_file}
cat $response_file > $log_file
job_status=`jq '.TranscriptionJob.TranscriptionJobStatus' < $response_file`

# if job succeeded, retrieve output file URL and download output file from the URL to galaxy output file location
if [ ${job_status} = "COMPLETED" ]; then
    transcript_file_uri=`jq '.TranscriptionJob.Transcript.TranscriptFileUri' < $response_file`
    aws s3 cp $transcript_file_uri $output_file > $log_file
    echo "Job ${job_name} completed in success!" > $log_file
# otherwise print error message to the log and exit with error code
elif [ ${job_status} = "FAILED" ]; then
    echo "Job ${job_name} failed!" > $log_file
    exit 1
else
    echo "Job ${job_name} ended in unexpected status: ${job_status}" > $log_file
    exit 2
fi



