import json
import sys
import os


# Convert IIIF manifest JSON file to standard NER output JSON file.
# Usage: iiif_to_ner.py output_iiif input_ner output_ner
def main():
    # parse command line arguments
    output_iiif = sys.argv[1]	# input file generated by NER in standard AMP json format to convert from
    input_ner = sys.argv[2]		# input file to feed to NER editor in IIIF json format to convert to
    output_ner = sys.argv[3]	# context info as json string needed for creating HMGM tasks

    try:
        iiif_data = json.load(output_iiif)
		ner_data = json.load(input_ner)

		entity_dict = build_ner_entity_dictionary(ner_data)
        ner_data["entities"] = generate_ner_entities(iiif_data, entity_dict)



        # iiif_data = {}

        # iiif_data["@context"] = [
        #     "http://digirati.com/ns/timeliner",
        #     "http://www.w3.org/ns/anno.jsonld",
        #     "http://iiif.io/api/presentation/3/context.json"
        # ]

                
        # iiif_data["id"] = ner_data["media"]["filename"]         # use NER media filename for ID
        # iiif_data["type"] = "Manifest"
        # iiif_data["label"] = {"en": context["primaryfileName"]} # use Primaryfile name for label
        # iiif_data["summary"] = {"en": "Named Entity Recognition for Primaryfile " + context["primaryfileName"]}
            
        # items = {"id": "canvas-1", "type": "Canvas", "duration": duration}
        # items_items["id"] = 

    except Exception as e:
        print(f"Exception reading media info from {media_info_path}", e)
        duration = 0


# Populate IIIF fields other than annotations
def generate_iiif_other_fields(context, ner_data):
    primaryfile_name = context["primaryfileName"]
    primaryfile_url = context["primaryfileUrl"]
    media_info_path = context["primaryfileMediaInfo"]
    duration = get_media_duration(media_info_path)

    iiif_data = {
        "@context": [
            "http://digirati.com/ns/timeliner",
            "http://www.w3.org/ns/anno.jsonld",
            "http://iiif.io/api/presentation/3/context.json"
        ],
        "id": ner_data["media"]["filename"],
        "type": "Manifest",
        "label": { "en": [ "Primaryfile " + primaryfile_name ] },
        "summary": { "en": [ "Named Entity Recognition for " + primaryfile_name ] },
        "items": [
            {
            "id": "canvas-1",
            "type": "Canvas",
            "duration": duration,
            "items": [
                {
                "id": "annotation-1",
                "type": "AnnotationPage",
                "items": [
                    {
                    "id": "annotation-1/1",
                    "type": "Annotation",
                    "motivation": "painting",
                    "body": {
                        "id": primaryfile_url + "#t=0,",
                        "type": "Audio",
                        "duration": duration
                    },
                    "target": "canvas-1"
                    }
                ]
                }
                ]
            }
            ],
        "structures": [
            {
            "id": "range-1",
            "type": "Range",
            "label": { "en": [ "Unique Bubble" ] },
            "tl:backgroundColour": "#ACD4E2",
            "items": [
                {
                "type": "Canvas",
                "id": f"canvas-1#t=0,{duration}"
                }
            ]
            }
        ],
        "tl:settings": {
            "tl:bubblesStyle": "rounded",
            "tl:blackAndWhite": false,
            "tl:showTimes": false,
            "tl:autoScaleHeightOnResize": false,
            "tl:startPlayingWhenBubbleIsClicked": false,
            "tl:stopPlayingAtTheEndOfSection": false,
            "tl:startPlayingAtEndOfSection": false,
            "tl:zoomToSectionIncrementally": false,
            "tl:showMarkers": true,
            "tl:bubbleHeight": 80,
            "tl:backgroundColour": "#fff",
            "tl:colourPalette": "default"
        }        
    }

    return iiif_data


# Generate IIIF annotations
def generate_iiif_annotations(iiif_data, ner_data):
    annotations_items = []

    # create a IIIF annotation for each entity in ner_data 
    for i, entity in ner_data["entities"]:
        annotation = {
          "id": f"marker-{i}",
          "type": "Annotation",
          "label": { "en": [ entity["text"]  ]  },
          "body": {
            "type": "TextualBody",
            "value": entity["type"],
            "format": "text/plain",
            "language": "en"
          },
          "target": {
            "type": "SpecificResource",
            "source": "canvas-1",
            "selector": {
              "type": "PointSelector",
              "t":  entity["start"]
            }
          }
        }
        annotations_items.append(annotation)

    annotations = {
      "type": "AnnotationPage",
      "items": annotations_items
    }
    return annotations


# Get media duration from the media info file with the given mediaInfoPath.
def get_media_duration(media_info_path):
	try:
		with open(media_info_path, 'r') as media_info_file:
			media_info = json.load(task_file)
			duration = media_info['streams']['audio']['duration']
	except Exception as e:
        print(f"Exception reading media info from {media_info_path}", e)
        duration = 0
	return duration


if __name__ == "__main__":
    main()    
